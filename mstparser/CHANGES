-----------------------------------------------------------------------
v0.5.0





-----------------------------------------------------------------------
v0.4.0

- Cleaned up Pipes considerably; eg, Pipe2O doesn't replicate so much
  code from Pipe. Many of the createFeatureVector methods were renamed
  to things like addCoreFeatures. (JMB)

- If one uses MST format, the creation of posA and the
  5-character-substring features now are put into dependency instances
  in MSTReader as the course pos tags and lemmas, respectively. Then
  in the feature extraction code, rather than creating posA etc on the
  fly, it just references those fields in the dependency
  instance. That way, if you use conll format, you get to use lemma
  and course tag values supplied by the annotations. (JMB)

- Can utilize the FEAT1|FEAT2|...|FEATN field of the CONLL format to
  allow abitrary features. See addCoreFeatures() in the DependencyPipe
  class. (JMB)

-----------------------------------------------------------------------
v0.2.2

- MSTParser now works with both MST and CONLL formats.  Pipes are now
  passed a parameter for which format they use, and they call upon
  Readers and Writers that know how to handle each format. CONLL is
  the default format. (JMB)

- Added a subset of the Portuguese data from CONLL to test the CONLL
  format and to have another data set for the testbed. See TESTBED
  (JMB)

- Included an Ant build system that does some nice things, but which
  can be ignored if make is preferred. Highlights of the additional
  capabilities are: (1) class files are put in a location
  (./output/classes) separate from the .java files; (2) you can get
  javadocs (./doc/api) by running "sh build.sh javadoc"; (3) you can
  make a release with "sh build.sh release" You don't need to install
  anything extra ( ant.jar in in ./lib); the only additional steps
  needed to use the Ant build setup is to set the JAVA_HOME and
  MSTPARSER_DIR environment variables appropriately. (JMB)




